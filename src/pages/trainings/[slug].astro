---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import HeroSmall from "../../components/HeroSmall.astro";
import CTAIntroFlight from "../../components/CTAIntroFlight.astro";

// Build all routes
export async function getStaticPaths() {
  const trainings = await getCollection("trainings");
  return trainings.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Per-page data
const { entry } = Astro.props;
const data = entry.data;

// Robust image access (supports {src,alt} object OR Astro image())
const heroSrc =
  typeof data.heroImage === "object" && "src" in data.heroImage
    ? data.heroImage.src
    : undefined;

const heroAlt =
  (typeof data.heroImage === "object" && "alt" in data.heroImage
    ? data.heroImage.alt
    : undefined) || data.title;

// Stats: supports object {programLength, flightHours} or array of {label,value}
let programLength = "";
let flightHours = "";
if (Array.isArray(data.stats)) {
  programLength =
    data.stats.find((s) => /length|program/i.test(s.label))?.value ?? "";
  flightHours =
    data.stats.find((s) => /flight.*hours/i.test(s.label))?.value ?? "";
} else if (data.stats && typeof data.stats === "object") {
  programLength = data.stats.programLength ?? "";
  flightHours = data.stats.flightHours ?? "";
}

// Safe fallbacks
const structure = Array.isArray(data.structure) ? data.structure : [];
const benefits = Array.isArray(data.benefits) ? data.benefits : [];
const assessments = Array.isArray(data.assessments) ? data.assessments : [];
const entryReqs = Array.isArray(data.entryRequirements)
  ? data.entryRequirements
  : [];
---

<BaseLayout>
  <!-- HERO -->
  <HeroSmall
    data={{
      title: data.title,
      subtitle: data.level,
      primaryImage: "/src/assets/stock/Small Airplanes Airport Tarmac.jpg",
      primaryAlt: "Person attending a training session",
    }}
  />

  <section class="bg-black px-8 py-10 lg:py-14">
    <div class="my-12 flex flex-col items-center text-center">
      <p
        class="eyebrow inline-flex items-center gap-2 px-3 py-1 text-[11px] tracking-widest uppercase"
      >
        <span class="size-1.5 rounded-full bg-yellow-400/90"></span>
        {data.title}
        <span class="size-1.5 rounded-full bg-yellow-400/90"></span>
      </p>
      <h2
        class="mt-3 text-[clamp(28px,6vw,56px)] leading-[1.05] font-extrabold tracking-[-0.02em] text-white"
      >
        Program Details
      </h2>
      <p class="mt-4 max-w-3xl text-lg text-white/80">{data.tagline}</p>
    </div>
    <!-- 2-column hero row -->
    <div class="grid gap-10 md:grid-cols-2">
      <!-- LEFT COLUMN: Info box + Program Structure -->
      <div class="flex flex-col gap-10">
        <!-- Info box -->
        <div
          class="bg-accent-600/40 ring-primary-300/20 rounded-3xl p-6 text-white shadow ring-1 md:p-8"
        >
          <div class="grid gap-6 md:grid-cols-2">
            <div>
              <p class="text-xl text-primary-300 font-bold">
                Total Program Length:
              </p>
              <h3 class="text-md mt-2 leading-tight font-medium">
                {programLength || "—"}
              </h3>
            </div>
            <div>
              <p class="text-xl text-primary-300 font-bold">
                Total Flight Hours:
              </p>
              <h3 class="text-md mt-2 leading-tight font-medium">
                {flightHours || "—"}
              </h3>
            </div>
          </div>
          <p class="mt-6 text-lg leading-8 text-white/90">
            {data.summary}
          </p>
        </div>

        {
          Array.isArray(structure) &&
            structure.map((section, si) => (
              <div class="bg-accent-600/40 ring-primary-300/20 rounded-3xl border border-white/10 p-6 text-white ring-1 md:p-8">
                <h3 class="text-primary-300 text-xl font-bold">
                  {String.fromCharCode(65 + si)}. {section.heading}
                </h3>

                <div class="mt-6 grid gap-x-8 gap-y-10 md:grid-cols-2 lg:grid-cols-3">
                  {section.items?.map((it) => (
                    <div>
                      <h4 class="text-xl font-semibold">{it.title}</h4>
                      <ul class="mt-3 space-y-2 text-white/85">
                        {Array.isArray(it.points) &&
                          it.points.map((p) => (
                            <li class="flex items-start gap-2">
                              <span class="bg-primary-500 mt-1 inline-flex h-5 w-5 shrink-0 items-center justify-center rounded-full text-black">
                                <svg
                                  viewBox="0 0 20 20"
                                  aria-hidden="true"
                                  class="h-4 w-4 fill-current"
                                  stroke-width="2"
                                >
                                  <path d="M8.5 13.1 5.4 10l-1.1 1.1 4.2 4.2 8-8L15.4 6l-6.9 7.1z" />
                                </svg>
                              </span>
                              <span>{p}</span>
                            </li>
                          ))}
                      </ul>
                    </div>
                  ))}
                </div>
              </div>
            ))
        }
      </div>

      <!-- RIGHT COLUMN: Image -->
      {
        heroSrc && (
          <figure class="h-full overflow-hidden rounded-3xl">
            <img
              src={heroSrc}
              alt={heroAlt}
              class="h-[360px] w-full object-cover sm:h-[520px] md:h-full"
              loading="eager"
            />
          </figure>
        )
      }
    </div>
  </section>

  <!-- FULL-WIDTH: Benefits / Assessments / Entry Requirements -->
  <section class="bg-primary-500 p-14 text-black">
    <div class="grid gap-8 lg:grid-cols-[2fr_2fr_1.5fr]">
      <!-- Benefits -->
      <div>
        <h2 class="text-3xl font-extrabold tracking-tight">Program Benefits</h2>
        <ul class="mt-6 space-y-4">
          {
            benefits.map((b) => (
              <li class="flex items-start gap-3">
                <span class="mt-1 inline-flex h-5 w-5 shrink-0 items-center justify-center rounded-full bg-black text-primary-500">
                  <svg
                    viewBox="0 0 20 20"
                    aria-hidden="true"
                    class="h-4 w-4 fill-current"
                  >
                    <path d="M8.5 13.1 5.4 10l-1.1 1.1 4.2 4.2 8-8L15.4 6l-6.9 7.1z" />
                  </svg>
                </span>
                <span class="text-xl font-semibold">{b}</span>
              </li>
            ))
          }
        </ul>
      </div>

      <!-- Assessments -->
      <div>
        <h2 class="text-3xl font-extrabold tracking-tight">Assessments</h2>
        <ul class="mt-6 space-y-4">
          {
            assessments.map((a) => (
              <li class="flex items-start gap-3">
                <span class="text-primary-500 mt-1 inline-flex h-5 w-5 shrink-0 items-center justify-center rounded-full bg-black">
                  <svg
                    viewBox="0 0 20 20"
                    aria-hidden="true"
                    class="h-4 w-4 fill-current"
                  >
                    <path d="M8.5 13.1 5.4 10l-1.1 1.1 4.2 4.2 8-8L15.4 6l-6.9 7.1z" />
                  </svg>
                </span>
                <span class="text-xl font-semibold">{a}</span>
              </li>
            ))
          }
        </ul>
      </div>

      <!-- Entry Requirements -->
      <aside class="rounded-3xl bg-black/80 p-6 md:p-7">
        <h3 class="text-primary-500 text-3xl font-extrabold">
          Entry Requirements
        </h3>
        <ul class="mt-5 space-y-4">
          {
            entryReqs.map((e) => (
              <li class="flex items-start gap-3">
                <span class="bg-primary-500 mt-1 inline-flex h-5 w-5 shrink-0 items-center justify-center rounded-full text-black">
                  <svg
                    viewBox="0 0 20 20"
                    aria-hidden="true"
                    class="h-4 w-4 fill-current"
                    stroke-width="3"
                  >
                    <path d="M8.5 13.1 5.4 10l-1.1 1.1 4.2 4.2 8-8L15.4 6l-6.9 7.1z" />
                  </svg>
                </span>
                <span class="text-white/90">{e}</span>
              </li>
            ))
          }
        </ul>
      </aside>
    </div>
  </section>
  <CTAIntroFlight />
</BaseLayout>
