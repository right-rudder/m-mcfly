---
/**
 * Reusable contact/enroll/intro form component.
 * Props:
 * - content: object with { eyebrow, heading, subheading, info:{...}, form:{labels, placeholders, fields[], cta} }
 * - classes: optional class overrides (see defaults below)
 */
import contactData from "../data/forms/contact.js";

const { content = contactData, classes = {} } = Astro.props;

// Types for dynamic form fields
type FieldOption = {
  label: string;
  value: string | number;
};

type Field = {
  id: string;
  name?: string;
  label: string;
  type?: string;
  required?: boolean;
  placeholder?: string;
  pattern?: string;
  inputmode?: string;
  datalistId?: string;
  rows?: number;
  options?: FieldOption[];
  colSpan?: number;
  row?: number;
};

const ui = {
  section: "bg-black px-4 py-12 sm:px-6 lg:px-8 lg:py-20",
  grid: "grid grid-cols-1 items-stretch gap-8 lg:grid-cols-2 lg:gap-10 max-w-7xl mx-auto",
  left: "relative overflow-hidden rounded-3xl text-white",
  leftInner: "text-muted-50 p-6 sm:p-8 lg:p-10",
  right:
    "bg-primary-500/30 rounded-3xl p-6 ring-1 ring-primary-200/70 sm:p-8 lg:p-10 text-white font-semibold",
  eyebrow:
    "eyebrow-dark inline-flex items-center gap-2 px-3 py-1 text-[11px] tracking-widest uppercase",
  h2: "mt-2 text-4xl font-extrabold lg:text-5xl",
  sub: "text-muted-300 mt-4 max-w-prose",
  input:
    "bg-muted-900/70 text-muted-50 placeholder:text-muted-400 mt-2 h-12 rounded-2xl border border-white/10 px-4 outline-none focus:border-primary-300/40 focus:ring-2 focus:ring-primary-300/30",
  textarea:
    "bg-muted-900/70 text-muted-50 placeholder:text-muted-400 mt-2 rounded-2xl border border-white/10 px-4 py-3 outline-none focus:border-yellow-300/40 focus:ring-2 focus:ring-yellow-300/30",
  label: "text-muted-200 text-sm font-medium",
  button:
    "btn-primary box-shadow-[0_4px_20px_rgba(255,211,0,0.25)] hover:brightness-95 focus:outline-none focus-visible:ring-2 focus-visible:ring-yellow-300 focus-visible:ring-offset-2",

  // NEW: native select styled + dark popup/options
  select:
    // base look matching inputs
    "bg-muted-900/70 text-muted-50 placeholder:text-muted-400 mt-2 h-12 w-full rounded-2xl " +
    "border border-white/10 px-4 pr-10 outline-none focus:border-primary-300/40 focus:ring-2 focus:ring-primary-300/30 " +
    // render the UA dropdown in dark mode (modern browsers)
    "[color-scheme:dark] " +
    // darken rows where supported (Chromium/Firefox respect option styling)
    "[&>option]:bg-[#0b0b0b] [&>option]:text-[#e5e7eb] " +
    "[&>optgroup]:bg-[#0b0b0b] [&>optgroup]:text-[#9ca3af]",

  ...classes,
};

const iconWrap =
  "inline-flex h-10 w-10 shrink-0 items-center justify-center rounded-xl bg-yellow-400/10 ring-1 ring-yellow-300/20";
const icon = "h-5 w-5 text-yellow-300";
---

<section class={ui.section} aria-labelledby="contact-heading">
  <div class={ui.grid}>
    <!-- LEFT: Info panel -->
    <div class={ui.left}>
      <div class={ui.leftInner}>
        <h2 class="text-5xl font-extrabold tracking-tight">
          {content?.info?.title}
        </h2>
        {
          content?.info?.intro && (
            <p class="text-muted-200 text-md mt-3 max-w-prose">
              {content.info.intro}
            </p>
          )
        }

        <ul class="mt-8 space-y-6">
          {
            content?.info?.addressLine1 && (
              <li class="flex items-start gap-4">
                <span class={iconWrap} aria-hidden="true">
                  <svg viewBox="0 0 24 24" class={icon}>
                    <path
                      fill="currentColor"
                      d="M12 2a7 7 0 0 0-7 7c0 5.25 7 13 7 13s7-7.75 7-13a7 7 0 0 0-7-7Zm0 9.5a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5Z"
                    />
                  </svg>
                </span>
                <div>
                  <p class="text-muted-100 font-semibold">
                    {content?.info?.locationLabel || "Location"}
                  </p>
                  <div class="flex flex-wrap gap-1">
                    <p class="text-muted-300">{content.info.addressLine1},</p>
                    {content?.info?.addressLine2 && (
                      <p class="text-muted-300">{content.info.addressLine2}</p>
                    )}
                  </div>
                </div>
              </li>
            )
          }

          {
            content?.info?.phoneValue && (
              <li class="flex items-start gap-4">
                <span class={iconWrap} aria-hidden="true">
                  <svg viewBox="0 0 24 24" class={icon}>
                    <path
                      fill="currentColor"
                      d="M6.62 10.79a15.05 15.05 0 0 0 6.59 6.59l2.2-2.2a1 1 0 0 1 1.01-.24c1.11.37 2.31.57 3.58.57a1 1 0 0 1 1 1v3.49a1 1 0 0 1-1 1C10.29 22 2 13.71 2 3.99a1 1 0 0 1 1-1H6.5a1 1 0 0 1 1 1c0 1.27.2 2.47.57 3.58a1 1 0 0 1-.24 1.01l-2.2 2.21Z"
                    />
                  </svg>
                </span>
                <div>
                  <p class="text-muted-100 font-semibold">
                    {content?.info?.phoneLabel || "Phone"}
                  </p>
                  <a
                    href={`tel:${content.info.phoneValue}`}
                    class="text-muted-300 hover:text-yellow-300"
                  >
                    {content.info.phoneValue}
                  </a>
                </div>
              </li>
            )
          }
        </ul>
      </div>
    </div>

    <!-- RIGHT: Form -->
    <div class={ui.right}>
      {
        content?.eyebrow && (
          <p class={ui.eyebrow}>
            <span class="size-1.5 rounded-full bg-yellow-400/90" />
            {content.eyebrow}
          </p>
        )
      }
      {
        content?.heading && (
          <h2 id="contact-heading" class={ui.h2}>
            {content.heading}
          </h2>
        )
      }
      {content?.subheading && <p class={ui.sub}>{content.subheading}</p>}

      <form
        class="mt-8 space-y-6"
        method={content?.form?.method || "post"}
        action={content?.form?.action || "#"}
        onsubmit={content?.form?.onsubmit ||
          "event.preventDefault(); alert('This is a demo form. Hook it up to your endpoint.');"}
      >
        <!-- Dynamic fields -->
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
          {
            content.form.fields
              ?.filter((f: Field) => f.row === 1)
              .map((f: Field) => (
                <div
                  class={
                    f.colSpan === 2
                      ? "flex flex-col md:col-span-2"
                      : "flex flex-col"
                  }
                >
                  <label for={f.id} class={ui.label}>
                    {f.label}
                    {f.required && <span class="text-yellow-300">*</span>}
                  </label>
                  {f.type !== "textarea" && f.type !== "select" ? (
                    <input
                      id={f.id}
                      name={f.name || f.id}
                      type={f.type || "text"}
                      required={f.required}
                      placeholder={f.placeholder}
                      class={ui.input}
                      pattern={f.pattern}
                      inputmode={f.inputmode}
                      list={f.datalistId}
                    />
                  ) : null}
                  {f.type === "select" ? (
                    <select
                      id={f.id}
                      name={f.name || f.id}
                      required={f.required}
                      class={ui.select}
                    >
                      {(f.options || []).map((o: FieldOption) => (
                        <option value={o.value}>{o.label}</option>
                      ))}
                    </select>
                  ) : null}
                  {f.type === "textarea" ? (
                    <textarea
                      id={f.id}
                      name={f.name || f.id}
                      rows={f.rows || 6}
                      required={f.required}
                      placeholder={f.placeholder}
                      class={ui.textarea}
                    />
                  ) : null}
                </div>
              ))
          }
        </div>

        <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
          {
            content.form.fields
              ?.filter((f: Field) => f.row === 2)
              .map((f: Field) => (
                <div
                  class={
                    f.colSpan === 2
                      ? "flex flex-col md:col-span-2"
                      : "flex flex-col"
                  }
                >
                  <label for={f.id} class={ui.label}>
                    {f.label}
                    {f.required && <span class="text-yellow-300">*</span>}
                  </label>
                  {f.type !== "textarea" && f.type !== "select" ? (
                    <input
                      id={f.id}
                      name={f.name || f.id}
                      type={f.type || "text"}
                      required={f.required}
                      placeholder={f.placeholder}
                      class={ui.input}
                      pattern={f.pattern}
                      inputmode={f.inputmode}
                    />
                  ) : null}
                  {f.type === "select" ? (
                    <select
                      id={f.id}
                      name={f.name || f.id}
                      required={f.required}
                      class={ui.select}
                    >
                      {(f.options || []).map((o: FieldOption) => (
                        <option value={o.value}>{o.label}</option>
                      ))}
                    </select>
                  ) : null}
                  {f.type === "textarea" ? (
                    <textarea
                      id={f.id}
                      name={f.name || f.id}
                      rows={f.rows || 6}
                      required={f.required}
                      placeholder={f.placeholder}
                      class={ui.textarea}
                    />
                  ) : null}
                </div>
              ))
          }
        </div>

        <!-- Any fields placed on row 3+ take full width -->
        {
          content.form.fields
            ?.filter((f: Field) => (f.row || 3) >= 3)
            .map((f: Field) => (
              <div class="flex flex-col">
                <label for={f.id} class={ui.label}>
                  {f.label}
                  {f.required && <span class="text-yellow-300">*</span>}
                </label>
                {f.type === "textarea" ? (
                  <textarea
                    id={f.id}
                    name={f.name || f.id}
                    rows={f.rows || 6}
                    required={f.required}
                    placeholder={f.placeholder}
                    class={ui.textarea}
                  />
                ) : f.type === "select" ? (
                  <select
                    id={f.id}
                    name={f.name || f.id}
                    required={f.required}
                    class={ui.select}
                  >
                    {(f.options || []).map((o: FieldOption) => (
                      <option value={o.value}>{o.label}</option>
                    ))}
                  </select>
                ) : (
                  <input
                    id={f.id}
                    name={f.name || f.id}
                    type={f.type || "text"}
                    required={f.required}
                    placeholder={f.placeholder}
                    class={ui.input}
                    pattern={f.pattern}
                    inputmode={f.inputmode}
                  />
                )}
              </div>
            ))
        }

        <!-- CTA -->
        <div class="pt-2 space-y-4">
          <!-- Terms + SMS checkbox -->
          <div class="flex items-start">
            <input
              id="accept"
              type="checkbox"
              class="mt-1 h-5 w-5 rounded border-white/20 bg-muted-900/70 text-yellow-400 focus:ring-yellow-300"
              required
              onclick="document.getElementById('submitBtn').disabled = !this.checked"
            />
            <label for="accept" class="ml-3 text-sm text-muted-200">
              I agree to the
              <a href="/privacy-policy-and-terms-of-service" target="_blank" class="underline hover:text-yellow-300">Terms & Conditions</a>
              and consent to receive SMS communications from McFly Education.
            </label>
          </div>

          <!-- Submit button -->
          <button id="submitBtn" type="submit" class={ui.button} disabled>
            {content?.form?.cta || "Submit"}
          </button>
        </div>
      </form>
    </div>
  </div>
</section>

<!-- Optional: extra safety for dark options on some engines -->
<style is:global>
  /* only affect selects that set color-scheme: dark via the class above */
  select[class*="[color-scheme:dark]"] option,
  select[class*="[color-scheme:dark]"] optgroup {
    background-color: #0b0b0b;
    color: #e5e7eb;
  }
</style>
